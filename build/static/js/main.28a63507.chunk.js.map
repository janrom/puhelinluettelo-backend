{"version":3,"sources":["components/FilterPerson.js","components/AddPerson.js","components/ShowPersons.js","components/Notification.js","services/person.js","App.js","index.js"],"names":["FilterPerson","props","react_default","a","createElement","id","onChange","handleFilteredPersons","AddPerson","onSubmit","addOrUpdatePerson","handleNameChange","handleNumChange","type","onClick","validateInput","ShowPersons","personArray","map","person","key","name","number","removePerson","Notification","message","className","style","baseUrl","services_person","getAll","axios","get","then","response","data","create","newObject","post","update","put","concat","remove","delete","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","personsArray","state","persons","filter","p","newName","length","updatePerson","addPerson","personObject","newNumber","personService","setState","showNotification","clearInput","catch","error","indexOf","target","value","document","getElementById","filtered","toLowerCase","includes","filteredPersons","msg","notification","notificationStyle","setTimeout","_this2","components_Notification","components_FilterPerson","bind","components_AddPerson","components_ShowPersons","React","Component","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.28a63507.chunk.js","sourcesContent":["import React from 'react'\n\nconst FilterPerson = (props) => {\n  return (\n    <div>\n      rajaa näytettäviä <input id=\"namefilter\" onChange={props.handleFilteredPersons} />\n    </div>\n  )\n}\n\nexport default FilterPerson\n","import React from 'react'\n\nconst AddPerson = (props) => {\n  return (\n    <form onSubmit={props.addOrUpdatePerson}>\n      <div>\n        nimi: <input id=\"name\" onChange={props.handleNameChange}/>\n      </div>\n      <div>\n        puhelinumero: <input id=\"phonenumber\" onChange={props.handleNumChange}/>\n      </div>\n      <div>\n        <button type=\"submit\" onClick={props.validateInput}>lisää</button>\n      </div>\n    </form>\n  )\n}\n\nexport default AddPerson\n","import React from 'react'\n\nconst ShowPersons = (props) => {  \n  return(\n    <table>\n      <tbody>\n        {props.personArray.map( person => {\n          return(\n            <tr key={person.name}>\n              <td>{person.id}</td>\n              <td>{person.name}</td>\n              <td>{person.number}</td> \n              <td><button onClick={() => props.removePerson(person.id)}>Poista</button></td>\n            </tr>              \n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport default ShowPersons","import React from 'react'\n\nconst Notification = (props) => {  \n  if (props.message === null) {\n    return null\n  }\n\n  return (\n    <div className={props.style}>\n      {props.message}\n    </div>\n  )  \n}\n\nexport default Notification","import axios from 'axios'\n\n// palvelimen juurihakemisto\nconst baseUrl = '/api/persons'\n\n// hakee kaikki kontaktit palvelimelta ja palauttaa datan (kontaktit)\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\n// luo palvelimelle uuden kontaktin ja palauttaa kontaktin\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\n// korvaa id:ta vastaavan kontaktin palvelimella ja palauttaa sen\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\n// poistaa palvelimelta id:a vastaavan kontaktin\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n","import React from 'react';\nimport './index.css'\nimport FilterPerson from './components/FilterPerson'\nimport AddPerson from './components/AddPerson'\nimport ShowPersons from './components/ShowPersons'\nimport Notification from './components/Notification'\nimport personService from './services/person'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [],\n      filteredPersons: [],\n      newName: '',\n      newNumber: '',\n      notification: null,\n      notificationStyle: null\n    }\n  }\n\n  // lataa data json-palvelimelta ja aseta komponentin tilaksi\n  componentDidMount() {\n    personService\n      .getAll()\n      .then(persons => {\n        this.setState({ persons })\n      })\n      .catch(error => this.showNotification(`Valitettavasti kontaktien lataaminen palvelimelta epaonnistui`, 'errorNotification'))      \n  }\n  \n  /* tarkistaa onko annettu nimi jo puhelinluettelossa:\n  * jos on -> paivita olemassaoleva\n  * jos ei -> lisaa uusi */  \n  addOrUpdatePerson = (event) => {\n    event.preventDefault()    \n    \n    const personsArray = this.state.persons.filter(p => p.name === this.state.newName)    \n    if (personsArray.length > 0) {      \n      this.updatePerson(personsArray[0])\n    }\n    else {\n      this.addPerson()      \n    }    \n  }\n\n  // lisää uusi henkilo puhelinluetteloon\n  addPerson = () => {\n    // luo uusi alkio\n    const personObject = {      \n      name: this.state.newName,\n      number: this.state.newNumber\n    }    \n\n    // lisaa uuden henkilo-objektin json-palvelimelle seka komponentin tilakenttaan\n    personService\n      .create(personObject)\n      .then(response => {        \n        this.setState({ \n          persons: this.state.persons.concat(response),\n          newName: '',\n          newNumber: ''\n        })\n        this.showNotification(`Lisattiin ${response.name}`, 'successNotification')\n        this.clearInput()\n      })            \n      .catch(error => this.showNotification(`Valitettavasti lisaaminen epaonnistui`, 'errorNotification'))    \n  }\n\n  // paivittaa puheliluottelossa olevan nykyisen henkilon tiedot\n  updatePerson = (person) => {    \n    person.number = this.state.newNumber\n    \n    // korvaa nimea vastaavan henkilo-objektin json-palvelimelle seka komponentin tilakenttaan\n    personService\n      .update(person.id, person)      \n      .then(response => {        \n        this.setState({\n          persons: this.state.persons.map(p => p.name !== response.name ? p : response),\n          newName: '',\n          newNumber: ''\n        })        \n        this.showNotification(`Paivitettiin ${response.name}`, 'successNotification')\n        this.clearInput()\n      })      \n      .catch(error => {\n        // kontakti on jo poistettu palvelimelta mutta on viela komponentin tilana, lisaa kontakti uudelleen palvelimella ja paivita komponentin tila\n        if (error.message.indexOf('404') !== -1) {\n          personService\n            .create(person)\n            .then(this.setState({ persons: this.state.persons.map(p => p.id !== person.id ? p : person) }))\n            .then(this.clearInput())\n            .catch(error => this.showNotification('Valitettavasti paivittaminen epaonnistui', 'errorNotification'))          \n        }\n        else {\n          this.showNotification('Valitettavasti paivittaminen epaonnistui', 'errorNotification')        \n        }        \n      })    \n  }\n\n  /*poista kontakti palvelimelta ja paivita komponentin tila seka clientin nakyma. \n  * eventin arvo on kontaktin id, joka poistetaan */\n  removePerson = (event) => {       \n    personService\n      .remove(event)\n      .then(response => personService.getAll())\n      .then(response => {\n        this.setState({ persons: response })\n        this.showNotification('Henkilo poistettu', 'successNotification')\n      })\n      .catch(error => {\n        // kontakti on jo poistettu palvelimelta mutta on viela komponentin tilana, poista kontakti komponentin tilasta kaikessa hiljaisuudessa\n        if (error.message.indexOf('404') !== -1) {          \n          this.setState({ persons: this.state.persons.filter( p => p.id !== event ) })\n        }\n        else {\n          this.showNotification('Valitettavasti poistaminen epaonnistui', 'errorNotification')        \n        }\n      })      \n  }\n  \n  // päivittää lomakkeen input-kentän arvon luokan tila-objektiin\n  handleNameChange = (event) => {\n    this.setState({ newName: event.target.value })    \n  }\n\n  handleNumChange = (event) => {\n    this.setState({ newNumber: event.target.value })\n  }\n\n  // tyhjennä lomakkeen input-kentät\n  clearInput = () => {    \n    document.getElementById('name').value = ''\n    document.getElementById('phonenumber').value = ''\n  }\n\n  // luo taulukko suodatetuista henkilöistä ja aseta se tila-objektin arvoksi\n  handleFilteredPersons = (event) => {\n    const filtered = this.state.persons.filter(person => person.name.toLowerCase().includes(event.target.value.toLowerCase()))\n\n    this.setState({ filteredPersons: filtered })\n  }\n\n  // tee tarkistukset lomakkeen syotteelle\n  validateInput = (event) => {    \n    if (this.state.newName.length === 0) {\n      event.preventDefault()\n      this.showNotification('Annettu nimi ei ole kelvollinen', 'errorNotification')\n    }    \n  }\n\n  // aseta ilmoituksen teksti ja tyyli, uudelleen renderointi nayttaa viestin, kosk arvo ei null\n  showNotification = (msg, style) => {\n    this.setState({\n      notification: msg,\n      notificationStyle: style\n    })\n    setTimeout(() => {\n      this.setState({\n        notification: null,\n        notificationStyle: null\n      })\n    }, 5000)\n  }\n  \n  render() {\n    // valitse näytetäänkö koko luettelo vai suodatettu luettelo\n    const personArray = this.state.filteredPersons.length === 0 ? this.state.persons : this.state.filteredPersons\n    return (\n      <div>\n        <h1>Puhelinluettelo</h1>\n        <Notification style={this.state.notificationStyle} message={this.state.notification} />\n        <FilterPerson handleFilteredPersons={this.handleFilteredPersons.bind(this)} />\n        <h2>Lisää uusi kontakti / muuta kontaktin numeroa</h2>\n        <AddPerson addOrUpdatePerson={this.addOrUpdatePerson.bind(this)} handleNameChange={this.handleNameChange.bind(this)} handleNumChange={this.handleNumChange.bind(this)} \n          validateInput={this.validateInput.bind(this)} />\n        <h2>Numerot</h2>\n        <ShowPersons personArray={personArray} removePerson={this.removePerson}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}